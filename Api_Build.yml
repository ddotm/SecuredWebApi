# ASP.NET Core API Build
# pipeline properties
name: lilipudra-api-ci
resources:
  repositories:
  - repository: api  # identifier (A-Z, a-z, 0-9, and underscore)
    type: github  # github for GitHub
    name: ddotm/SecuredWebApi  # repository name (format depends on `type`)
    ref: refs/heads/master  # ref name to use, defaults to 'refs/heads/master'
    endpoint: ddotm  # name of the service connection to use (for non-Azure Repos types)

pool:
  name: Hosted Windows 2019 with VS2019
  demands:
  - msbuild
  - visualstudio
  - vstest

trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    include:
    - Api/*

variables:
  solution: 'SecuredWebAPI.sln'
  BuildPlatform: 'any cpu'
  BuildConfiguration: 'Api_Release'
  NugetVersion: '4.4.1'

stages:
- stage: Build stage
  jobs:
  -job: Checkout
  workspace:
    clean: all # what to clean up before the job runs - outputs | resources | all
   steps:
   - checkout: self  # self represents the repo where the initial Pipelines YAML file was found
     clean: true  # whether to fetch clean each time
     # fetchDepth: number  # the depth of commits to ask Git to fetch
     # lfs: true  # whether to download Git-LFS files
     # submodules: true | recursive  # set to 'true' for a single level of submodules or 'recursive' to get submodules of submodules
     # path: string  # path to check out source code, relative to the agent's build directory (e.g. \_work\1)
     persistCredentials: true  # set to 'true' to leave the OAuth token in the Git config after the initial fetch
  - job: Build job
    steps:
    - task: NuGetToolInstaller@1
      displayName: 'Use NuGet $(NugetVersion)'
      inputs:
        versionSpec: $(NugetVersion)

    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      inputs:
        restoreSolution: '$(solution)'

    - task: VSBuild@1
      displayName: 'Build solution $(solution)'
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactstagingdirectory)\\"'
        platform: '$(BuildPlatform)'
        configuration: '$(BuildConfiguration)'
        clean: true

    - task: VSTest@2
      displayName: 'VsTest - testAssemblies'
      inputs:
        testAssemblyVer2: |
         **\$(BuildConfiguration)\*test*.dll
         !**\obj\**
        platform: '$(BuildPlatform)'
        configuration: '$(BuildConfiguration)'

    - task: PublishSymbols@2
      displayName: 'Publish symbols path'
      inputs:
        SearchPattern: '**\bin\**\*.pdb'
        PublishSymbols: false
      continueOnError: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()
